rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read/write their own data and ALL subcollections
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Explicitly allow all nested documents under users
      match /{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Allow authenticated users to read/write lootboxes they own
    match /lootboxes/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Rules for group_boxes
    match /group_boxes/{groupBoxId} {
      // Anyone can read group boxes (for sharing)
      allow read: if true;
      
      // Create: only if you're the creator
      allow create: if request.auth != null 
                    && request.auth.uid == request.resource.data.createdBy;
      
      // Update: allow authenticated users ONLY if not expired
      allow update: if request.auth != null && 
                    (!('expiresAt' in resource.data) || 
                     resource.data.expiresAt > request.time);
      
      // Delete: only creator
      allow delete: if request.auth != null 
                    && request.auth.uid == resource.data.createdBy;
      
      // Sub-collection: opens (anyone can read/create opens)
      match /opens/{openId} {
        allow read: if true;
        // Only allow creating opens if group box not expired
        allow create: if !isGroupBoxExpired();
        allow update, delete: if false; // Opens are permanent
      }
      
      // Sub-collection: user tries tracking
      match /user_tries/{userId} {
        allow read: if true;
        // Only allow writing if group box not expired
        allow write: if !isGroupBoxExpired();
      }
      
      // Sub-collection: session history
      match /session_history/{historyId} {
        allow read: if request.auth != null;
        // Only allow writing history if not expired
        allow write: if request.auth != null && !isGroupBoxExpired();
      }
      
      // Helper function to check parent group box expiration
      function isGroupBoxExpired() {
        let groupBox = get(/databases/$(database)/documents/group_boxes/$(groupBoxId));
        return 'expiresAt' in groupBox.data && 
               groupBox.data.expiresAt <= request.time;
      }
    }
    
    // Test collection
    match /tests/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Spins collection
    match /spins/{document=**} {
      allow read, write: if request.auth != null;
    }
    
    // Chests collection
    match /chests/{document=**} {
      allow read: if true;
    }
  }
}